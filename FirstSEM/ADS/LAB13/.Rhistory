else if(length(i)>1){
out_prim <- 0
for(el in i){
out_prim <- out_prim + el
}
output <- output + out_prim
}
else{
output <- output + as.numeric(i)
}
}
return(output)
}
MYsum(1:9,"test",1:9)
MYsum <- function(...){
numberList <- list(...)
out <- 0
for(i in numberList){
#9.2 convert the arguments to numbers
if(is.na(as.numeric(i))){
#9.3 if any of entered values can not be converted to the number skip!
next
}
else if(length(i)>1){
out_f <- 0
for(el in i){
out_f <-out_f + el
}
out <-out +out_f
}
else{
out <-out + as.numeric(i)
}
}
return(output)
MYsum(1:9, "test", 1:9)
MYsum(1:9, "test", 1:9)
average <- function (...){
numberList <- list(...)
out <- 0
num_elements <- 0
for(i in numberList){
#10.2 conver the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else if(length(i)>1){
out_f <- 0
for(el in i){
out_f <- out_f + el
}
out <- out + out_f
num_elements <- num_elements + length(i)
}
else{
out <- out + as.numeric(i)
num_elements <- num_elements + 1
}
}
return(out/num_elements)
}
average(1:9, "test", 1:9)
fac <- function(x){
y <- 1
if(is.na(as.integer(x))){
#11.3 if the value can not be converted to a nat. number  assign a NA value
x <- NA
return(x)
}
else{
#11.2 convert the argument to a natural number.
x <- as.integer(x)
#write a function that will calculate the fac for a given argument (n!)
for(i in 1:x){
y <-y*((1:x)[i])
}
}
return(y)
}
fac(10)
mini <- function (...){
inlist <- list(...)
outlist <- list()
for(i in inlist){
if(is.na(as.numeric(i))){
next
}
else{
outlist <- append(outlist, as.numeric(i))
}
}
for(i in outlist){
m <- outlist[1]
if(length(i)>1){
for(el in i){
if(el > m){
m <- el
}
}
}
else{
if (i> m){
m <- i
}
}
}
return(m)
}
mini("test", 1:9, "test")
min <- function (...){
numberList <- list(...)
out <- list()
for(i in numberList){
#convert the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else{
#add elements
out <- append(out, as.numeric(i))
}
}
#find an argument with the min. value using a for loop
for(i in out){
m <- out[1]
if(length(i)>1){
for(el in i){
if(el < m){
m <- el
}
}
}
else{
if (i< m){
m <- i
}
}
}
return(m)
}
min("test", 1:9, "test")
even <- function (...){
numberList <- list(...)
list <- list()
print(numberList)
for(i in numberList){
#14.2 convert the arguments to numbers
if(is.na(as.numeric(i))){
#14.3 skip
next
}
else{
##add
list <- append(list, as.numeric(i))
}
}
#main loop
for(i in list){
if((i %% 2) == 0){
print(i)
print("It is even")
}
else{
print(i)
print("It is not even")
}
}
}
even(2, 4, 6, 8, "test", 10)
odd <- function (...){
#takes any number of arguments
numberList <- list(...)
out <- list()
print(numberList)
for(i in numberList){
#convert and skip
if(is.na(as.numeric(i))){
next
}
else{
#add
out <- append(out, as.numeric(i))
}
}
for(i in out){
if((i %% 2) != 0){
print(i)
print("It is an odd number")
}
else{
print(i)
print("It is an even number")
}
}
}
odd(1, 3, 5, 7, "test", 9)
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
# Program to display the Fibonacci sequence up to n-th term using recursive functions
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(recurse_fibonacci(i))
}
}
recurse_fibonacci(3)
recurse_fibonacci(4)
recurse_fibonacci(10)
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms < 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms : TRUE) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
fibo(10)
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fib <- function(x) {
numeric(x)
fib[1] <- 1
fib[2] <- 1
for (i in 3:x) {
fib[i] <- fib[i-1]+fib[i-2]
}
}
fib(10)
fib <- function(x) {
fib<- numeric(x)
fib[1] <- 1
fib[2] <- 1
for (i in 3:x) {
fib[i] <- fib[i-1]+fib[i-2]
}
}
fib(10)
print(fib10)
print(fib(10)
print(fib(10))
fibo=function(n){
fibo=vector()
fibo[1]=1
fibo[2]=1
for(i in 3:n){fibo[i]=fibo[i-1]+fibo[i-2]}
return(fibo)
}
fibo(10)
fibo=function(n){
fibo=vector()
fibo[1]=1
fibo[2]=1
for(i in 3:n){fibo[i]=fibo[i-1]+fibo[i-2]}
print(fibo)
}
fibo(5)
max <- function (...){
numberList <- list(...)
out <- list()
for(i in numberList){
#convert the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else{
#add elements
out <- append(out, as.numeric(i))
}
}
#find an argument with the max. value using a for loop
for(i in out){
m <- out[1]
if(length(i)>1){
for(len in i){
if(len > m){
m <- len
}
}
}
else{
if (i> m){
m <- i
}
}
}
return(m)
}
max("test", 1:9, "test")
Fibonacci <- function(n) {
x <- c(0,1)
while (length(x) < n) {
position <- length(x)
new <- x[position] + x[position-1]
x <- c(x,new)
}
return(x)
}
Fibonacci(10)
fibo <- function(n) {
x <- c(0,1)
while (length(x) < n) {
position <- length(x)
newValue <- x[position] + x[position-1]
x <- c(x,newValue)
}
return(x)
}
fibo(10)
install.packages("psych")
install.packages("psych")
require("psych")
decribe("cars")
describe("cars")
describe(cars)
prop.test(98,162)
prop.test(98,162, alt = "greater", conf.level = .90)
[1:5,]
?quakes
quakes[1:5, ]
mag<-  quakes$mag
mag[1:5]
t.test(mag)
summary(cars$speed)
?HairEyeColor
str(HairEyeColor)
HairEyeColor
eyes <- margin.table(HairEyeColor,2)
eyes
round(prop.table(eyes),2)
chi1 <- chisq.test(eyes)
chi1 #results
chi2 <- chisq.test(eyes, p=c(.41,.32,.15,.12))
chi2
require("datasets")
?mtcars
str(mtcars)
data(mtcars)
summary(mtcars$qsec)
summary(mtcars$mpg)
summary(mtcars$hp)
d <- describe(mtcars[c(1, 4, 7)])
d
k <- describe(mtcars[c(1, 4, 7)])  # mpg, hp, qsec
k[, c(3, 4, 11, 12)]
kurtosi(mtcars$qsec)
install.packages("csdf")
install.packages("devtools")
devtools::install_github("mlt/csdf")
library(csdf)
Sys.setenv(TZ='GMT')
fpath <- system.file("extdata", "TOA5_E7331.Rad_dhm_2017_05_01_0100.dat", package="csdf")
obj <- read.toa5(fpath)
summary(obj)
obj <- read.toa5(fpath)
fpath <- system.file("extdata", "TOA5_E7331.Rad_dhm_2017_05_01_0100.dat", package="csdf")
fpath
fpath <- system.file("extdata", "TOA5_E7331.Rad_dhm_2017_05_01_0100.dat", package="csdf")
obj <- read.toa5("TOA5_E7331.Rad_dhm_2017_05_01_0100.dat")
obj <- read.toa5("TOA5_E7331.Rad_dhm_2017_05_01_0100.dat","rt")
obj <- read.toa5("extdata","TOA5_E7331.Rad_dhm_2017_05_01_0100.dat",package="csdf")
obj <- read.toa5("extdata","TOA5_E7331.Rad_dhm_2017_05_01_0100.dat")
obj <- read.toa5("TOA5_E7331.Rad_dhm_2017_05_01_0100.dat","extdata")
obj <- read.toa5('TOA5_E7331.Rad_dhm_2017_05_01_0100.dat',"extdata")
obj <- read.toa5("~/TOA5_E7331.Rad_dhm_2017_05_01_0100.dat")
obj <- read.toa5("C:\Users\alper\Documents\GitHub\smada\ModellingPhysicalSystems\Project\FixFile\TOA5_E7331.Rad_dhm_2017_05_01_0100.dat")
obj <- read.toa5("C:\\Users\alper\Documents\GitHub\smada\ModellingPhysicalSystems\Project\FixFile\TOA5_E7331.Rad_dhm_2017_05_01_0100.dat")
obj <- read.toa5("C:\\Users\\alper\\Documents\\GitHub\\smada\\ModellingPhysicalSystems\\Project\\FixFile\\TOA5_E7331.Rad_dhm_2017_05_01_0100.dat")
summary(obj)
write.csv(as.data.frame(obj), "plain.csv")
write.csv(as.data.frame(obj), "plain.csv")
install.packages("csv")
install.packages("csvread")
library("csv", lib.loc="~/R/win-library/3.4")
library("csvread", lib.loc="~/R/win-library/3.4")
write.csv(as.data.frame(obj), "plain.csv")
write.csv(as.data.frame(obj), "C:\\Users\\alper\\Documents\\GitHub\\smada\\ModellingPhysicalSystems\\Project\\FixFile\\plain.csv")
setwd("~/GitHub/smada/ADS/LAB13")
lm
rm(list=ls())
library(forecast)
install.packages("forecast")
library(ggplot2)
library(forecast)
autoplot(gold)
autoplot(forecast())
autoplot(forecast(gold))
autoplot(gold)
autoplot(forecast$golden)
autoplot(forecast$gold)
autoplot(forecast.ets())
autoplot(forecast.ets(gold))
autoplot(forecast.ets$gold
)
autoplot(gold)
which.max(gold)
OutVals = boxplot(gold)$out
which(gold %in% OutVals)
OutVals = boxplot(forecast)$gold
which(forecast %in% OutVals)
OutVals = boxplot(gold)$gold
OutVals = boxplot(gold)$gold
which(forecast %in% OutVals)
forecast$gold
forecast.ets(gold)
forecast(gold)
median(fr)
fr -> forecast(gold)
fr<-forecast(gold)
median(fr)
median(fr,ties.method = "min")
median(fr,ties.method = "min",na.last = "keep")
median(fr,ties.method = "min",na.last = "keep")
median(fr,ties.method = "max",na.last = "keep")
gold
fr<-gold
median(fr)
fr<-data(gold)
median(fr)
fr<-data(forecast$gold)
median(gold, na.rm = T)
fr<-gold
median(fr, na.rm = NA)
median(fr, na.rm = True)
median(fr, na.rm = T)
