return(output)
MYsum(1:9, "test", 1:9)
MYsum(1:9, "test", 1:9)
average <- function (...){
numberList <- list(...)
out <- 0
num_elements <- 0
for(i in numberList){
#10.2 conver the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else if(length(i)>1){
out_f <- 0
for(el in i){
out_f <- out_f + el
}
out <- out + out_f
num_elements <- num_elements + length(i)
}
else{
out <- out + as.numeric(i)
num_elements <- num_elements + 1
}
}
return(out/num_elements)
}
average(1:9, "test", 1:9)
fac <- function(x){
y <- 1
if(is.na(as.integer(x))){
#11.3 if the value can not be converted to a nat. number  assign a NA value
x <- NA
return(x)
}
else{
#11.2 convert the argument to a natural number.
x <- as.integer(x)
#write a function that will calculate the fac for a given argument (n!)
for(i in 1:x){
y <-y*((1:x)[i])
}
}
return(y)
}
fac(10)
mini <- function (...){
inlist <- list(...)
outlist <- list()
for(i in inlist){
if(is.na(as.numeric(i))){
next
}
else{
outlist <- append(outlist, as.numeric(i))
}
}
for(i in outlist){
m <- outlist[1]
if(length(i)>1){
for(el in i){
if(el > m){
m <- el
}
}
}
else{
if (i> m){
m <- i
}
}
}
return(m)
}
mini("test", 1:9, "test")
min <- function (...){
numberList <- list(...)
out <- list()
for(i in numberList){
#convert the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else{
#add elements
out <- append(out, as.numeric(i))
}
}
#find an argument with the min. value using a for loop
for(i in out){
m <- out[1]
if(length(i)>1){
for(el in i){
if(el < m){
m <- el
}
}
}
else{
if (i< m){
m <- i
}
}
}
return(m)
}
min("test", 1:9, "test")
even <- function (...){
numberList <- list(...)
list <- list()
print(numberList)
for(i in numberList){
#14.2 convert the arguments to numbers
if(is.na(as.numeric(i))){
#14.3 skip
next
}
else{
##add
list <- append(list, as.numeric(i))
}
}
#main loop
for(i in list){
if((i %% 2) == 0){
print(i)
print("It is even")
}
else{
print(i)
print("It is not even")
}
}
}
even(2, 4, 6, 8, "test", 10)
odd <- function (...){
#takes any number of arguments
numberList <- list(...)
out <- list()
print(numberList)
for(i in numberList){
#convert and skip
if(is.na(as.numeric(i))){
next
}
else{
#add
out <- append(out, as.numeric(i))
}
}
for(i in out){
if((i %% 2) != 0){
print(i)
print("It is an odd number")
}
else{
print(i)
print("It is an even number")
}
}
}
odd(1, 3, 5, 7, "test", 9)
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
# Program to display the Fibonacci sequence up to n-th term using recursive functions
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(recurse_fibonacci(i))
}
}
recurse_fibonacci(3)
recurse_fibonacci(4)
recurse_fibonacci(10)
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms < 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms : TRUE) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
fibo(10)
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fib <- function(x) {
numeric(x)
fib[1] <- 1
fib[2] <- 1
for (i in 3:x) {
fib[i] <- fib[i-1]+fib[i-2]
}
}
fib(10)
fib <- function(x) {
fib<- numeric(x)
fib[1] <- 1
fib[2] <- 1
for (i in 3:x) {
fib[i] <- fib[i-1]+fib[i-2]
}
}
fib(10)
print(fib10)
print(fib(10)
print(fib(10))
fibo=function(n){
fibo=vector()
fibo[1]=1
fibo[2]=1
for(i in 3:n){fibo[i]=fibo[i-1]+fibo[i-2]}
return(fibo)
}
fibo(10)
fibo=function(n){
fibo=vector()
fibo[1]=1
fibo[2]=1
for(i in 3:n){fibo[i]=fibo[i-1]+fibo[i-2]}
print(fibo)
}
fibo(5)
max <- function (...){
numberList <- list(...)
out <- list()
for(i in numberList){
#convert the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else{
#add elements
out <- append(out, as.numeric(i))
}
}
#find an argument with the max. value using a for loop
for(i in out){
m <- out[1]
if(length(i)>1){
for(len in i){
if(len > m){
m <- len
}
}
}
else{
if (i> m){
m <- i
}
}
}
return(m)
}
max("test", 1:9, "test")
Fibonacci <- function(n) {
x <- c(0,1)
while (length(x) < n) {
position <- length(x)
new <- x[position] + x[position-1]
x <- c(x,new)
}
return(x)
}
Fibonacci(10)
fibo <- function(n) {
x <- c(0,1)
while (length(x) < n) {
position <- length(x)
newValue <- x[position] + x[position-1]
x <- c(x,newValue)
}
return(x)
}
fibo(10)
install.packages("psych")
install.packages("psych")
require("psych")
decribe("cars")
describe("cars")
describe(cars)
prop.test(98,162)
prop.test(98,162, alt = "greater", conf.level = .90)
[1:5,]
?quakes
quakes[1:5, ]
mag<-  quakes$mag
mag[1:5]
t.test(mag)
summary(cars$speed)
?HairEyeColor
str(HairEyeColor)
HairEyeColor
eyes <- margin.table(HairEyeColor,2)
eyes
round(prop.table(eyes),2)
chi1 <- chisq.test(eyes)
chi1 #results
chi2 <- chisq.test(eyes, p=c(.41,.32,.15,.12))
chi2
require("datasets")
?mtcars
str(mtcars)
data(mtcars)
summary(mtcars$qsec)
summary(mtcars$mpg)
summary(mtcars$hp)
d <- describe(mtcars[c(1, 4, 7)])
d
k <- describe(mtcars[c(1, 4, 7)])  # mpg, hp, qsec
k[, c(3, 4, 11, 12)]
kurtosi(mtcars$qsec)
setwd("~/GitHub/smada/ADS/LAB11")
rm(list=ls())
download.file("http://home.agh.edu.pl/~mmd/_media/dydaktyka/
as-is/krakow-kurdwanow.zip", "krakow-kurdwanow.zip")
unzip("krakow-kurdwanow.zip")
x <- data$PM10
#2 Linear Regression
y <- data$PM25
x <- data$PM10
data()
data
data$PM25
data <- dget("./krakow-kurdwanow")
#2 Linear Regression
y <- data$PM25
x <- data$PM10
good <- complete.cases(x,y)
y <- y[good]
x <- x[good]
n <- length(x)
l <- (n*sum(x*y)-sum(x)*sum(y))
m <- sqrt((n*sum(x^2) - sum(x)^2) * (n*sum(y^2) - sum(y)^2))
l/m
cor(x,y)
ymean <- mean(y)
xmean <- mean(x)
as-is/krakow-kurdwanow.zip", "krakow-kurdwanow.zip")
unzip("krakow-kurdwanow.zip")
data <- dget("./krakow-kurdwanow")
y <- y - ymean
x <- x - xmean
mean(y)
mean(x)
sum_of_the_squered <- function(y,x,a) {
sum <- 0
for(i in seq_along(y)) {
sum <- sum + (y[i] - (a*x[i]))^2
}
sum
}
find_a <- function(y,x,a_vector) {
min_sum <- Inf
min_a <- NA
for(a in a_vector) {
sum <- sum_of_the_squered(y,x,a)
if(sum < min_sum) {
min_sum <- sum
min_a <- a
}
}
min_a
}
a
for(i in 0:10) {
a <- find_a(y,x,seq(a-10^(-i+1), a+10^(-i+1), 10^(-i)))
}
a <- 0
for(i in 0:10) {
a <- find_a(y,x,seq(a-10^(-i+1), a+10^(-i+1), 10^(-i)))
}
a
model <- lm(y ~ x)
model$coefficients["x"]
model$coefficients["x"] - a
plot(y~x)
abline(0,a, col="red", lwd=7)
abline(model, col="blue", lwd=3)
plot(data$PM25~data$PM10)
plot(data$PM25~data$PM10)
abline(ymean-a*xmean,a, col="red", lwd=5)
model <- lm(data$PM25 ~ data$PM10)
abline(model, col="white")
download.file("http://home.agh.edu.pl/~mmd/_media/dydaktyka/
as-is/krakow-kurdwanow.zip", "krakow-kurdwanow2.zip")
unzip("krakow-kurdwanow2.zip")
data2 <- dget("./krakow-kurdwanow2")
data2 <- dget("./krakow-kurdwanow2")
data2 <- dget("./krakow-kurdwanow")
data2
clear
a <- data2$SO2
b <- data2$NO2
c <- data2$PM10
rm(list = ls())
#EX2
data2 <- dget("./krakow-kurdwanow")
a <- data2$SO2
b <- data2$NO2
c <- data2$PM10
good <- complete.cases(a,b,c)
a <- a[good]
b <- b[good]
c <- c[good]
cor(a,b)
cor(a,c)
cor(b,c)
model<- lm(a~c)
model$coefficients[1]
model$coefficients[2]
plot(a~c)
cor(a,b) # result :0.5790506
abline(model,col="red",lwd=3)
abline(model,col="red",lwd=1)
abline(model,col="red",lwd=1)
sum_of_the_squares_line<- function(y,x,z,t){
sum<-0
for(i in seq_along(y)){
sum<- sum + (y[i] - (z*x[i]+t))^2
}
sum
}
sum_of_the_squares_line(a,c,model$coefficients[2],model$coefficients[1])
sum_of_the_squares_line(a,c,model$coefficients[2],model$coefficients[1])
