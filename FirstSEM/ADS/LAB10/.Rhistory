#11.3 if the value can not be converted to a nat. number  assign a NA value
x <- NA
return(x)
}
else{
#11.2 convert the argument to a natural number.
x <- as.integer(x)
#write a function that will calculate the fac for a given argument (n!)
for(i in 1:x){
y <-y*((1:x)[i])
}
}
return(y)
}
fac(10)
mini <- function (...){
inlist <- list(...)
outlist <- list()
for(i in inlist){
if(is.na(as.numeric(i))){
next
}
else{
outlist <- append(outlist, as.numeric(i))
}
}
for(i in outlist){
m <- outlist[1]
if(length(i)>1){
for(el in i){
if(el > m){
m <- el
}
}
}
else{
if (i> m){
m <- i
}
}
}
return(m)
}
mini("test", 1:9, "test")
min <- function (...){
numberList <- list(...)
out <- list()
for(i in numberList){
#convert the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else{
#add elements
out <- append(out, as.numeric(i))
}
}
#find an argument with the min. value using a for loop
for(i in out){
m <- out[1]
if(length(i)>1){
for(el in i){
if(el < m){
m <- el
}
}
}
else{
if (i< m){
m <- i
}
}
}
return(m)
}
min("test", 1:9, "test")
even <- function (...){
numberList <- list(...)
list <- list()
print(numberList)
for(i in numberList){
#14.2 convert the arguments to numbers
if(is.na(as.numeric(i))){
#14.3 skip
next
}
else{
##add
list <- append(list, as.numeric(i))
}
}
#main loop
for(i in list){
if((i %% 2) == 0){
print(i)
print("It is even")
}
else{
print(i)
print("It is not even")
}
}
}
even(2, 4, 6, 8, "test", 10)
odd <- function (...){
#takes any number of arguments
numberList <- list(...)
out <- list()
print(numberList)
for(i in numberList){
#convert and skip
if(is.na(as.numeric(i))){
next
}
else{
#add
out <- append(out, as.numeric(i))
}
}
for(i in out){
if((i %% 2) != 0){
print(i)
print("It is an odd number")
}
else{
print(i)
print("It is an even number")
}
}
}
odd(1, 3, 5, 7, "test", 9)
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
# Program to display the Fibonacci sequence up to n-th term using recursive functions
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(recurse_fibonacci(i))
}
}
recurse_fibonacci(3)
recurse_fibonacci(4)
recurse_fibonacci(10)
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms < 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms : TRUE) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
fibo(10)
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fib <- function(x) {
numeric(x)
fib[1] <- 1
fib[2] <- 1
for (i in 3:x) {
fib[i] <- fib[i-1]+fib[i-2]
}
}
fib(10)
fib <- function(x) {
fib<- numeric(x)
fib[1] <- 1
fib[2] <- 1
for (i in 3:x) {
fib[i] <- fib[i-1]+fib[i-2]
}
}
fib(10)
print(fib10)
print(fib(10)
print(fib(10))
fibo=function(n){
fibo=vector()
fibo[1]=1
fibo[2]=1
for(i in 3:n){fibo[i]=fibo[i-1]+fibo[i-2]}
return(fibo)
}
fibo(10)
fibo=function(n){
fibo=vector()
fibo[1]=1
fibo[2]=1
for(i in 3:n){fibo[i]=fibo[i-1]+fibo[i-2]}
print(fibo)
}
fibo(5)
max <- function (...){
numberList <- list(...)
out <- list()
for(i in numberList){
#convert the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else{
#add elements
out <- append(out, as.numeric(i))
}
}
#find an argument with the max. value using a for loop
for(i in out){
m <- out[1]
if(length(i)>1){
for(len in i){
if(len > m){
m <- len
}
}
}
else{
if (i> m){
m <- i
}
}
}
return(m)
}
max("test", 1:9, "test")
Fibonacci <- function(n) {
x <- c(0,1)
while (length(x) < n) {
position <- length(x)
new <- x[position] + x[position-1]
x <- c(x,new)
}
return(x)
}
Fibonacci(10)
fibo <- function(n) {
x <- c(0,1)
while (length(x) < n) {
position <- length(x)
newValue <- x[position] + x[position-1]
x <- c(x,newValue)
}
return(x)
}
fibo(10)
install.packages("psych")
install.packages("psych")
require("psych")
decribe("cars")
describe("cars")
describe(cars)
prop.test(98,162)
prop.test(98,162, alt = "greater", conf.level = .90)
[1:5,]
?quakes
quakes[1:5, ]
mag<-  quakes$mag
mag[1:5]
t.test(mag)
summary(cars$speed)
?HairEyeColor
str(HairEyeColor)
HairEyeColor
eyes <- margin.table(HairEyeColor,2)
eyes
round(prop.table(eyes),2)
chi1 <- chisq.test(eyes)
chi1 #results
chi2 <- chisq.test(eyes, p=c(.41,.32,.15,.12))
chi2
require("datasets")
?mtcars
str(mtcars)
data(mtcars)
summary(mtcars$qsec)
summary(mtcars$mpg)
summary(mtcars$hp)
d <- describe(mtcars[c(1, 4, 7)])
d
k <- describe(mtcars[c(1, 4, 7)])  # mpg, hp, qsec
k[, c(3, 4, 11, 12)]
kurtosi(mtcars$qsec)
rm(list = ls())
setwd("~/GitHub/smada/ADS/LAB10")
unzip("lab10dataset.csv.zip")
#rm(list = ls())
setwd("~/GitHub/smada/ADS/LAB10")
download.file("http://home.agh.edu.pl/~mmd/_media/dydaktyka/as-is/lab10dataset.csv.zip", "lab10dataset.csv.zip")
unzip("lab10dataset.csv.zip")
require(ggplot2)
ggplot(data.frame(meanTime = boot.statistics),aes(x=meanTime)) +
geom_histogram(binwidth=0.25,aes(y=..density..)) +
geom_density(color="red")
library(readr)
lab10dataset <- read_csv("lab10dataset.csv")
View(lab10dataset)
require(ggplot2)
ggplot(data.frame(meanTime = lab10dataset),aes(x=meanTime)) + geom_histogram(binwidth=0.25,aes(y=..density..)) +geom_density(color="red")
ggplot(data.frame(meanTime = lab10dataset),aes(x=meanTime)) +
geom_histogram(binwidth=0.25,aes(y=..density..)) +
geom_density(color="red")
lab10dataset <- read_csv("lab10dataset.csv")
require(ggplot2)
ggplot(data.frame(meanTime = lab10dataset),aes(x=meanTime)) +
geom_histogram(binwidth=0.25,aes(y=..density..)) +
geom_density(color="red")
ggplot(data.frame(meanTime = lab10dataset),aes(x=meanTime)
geom_histogram(binwidth=0.25,aes(y=..density..)
geom_histogram(binwidth=0.25,aes(y=..density..))
geom_density(color="red")
require(ggplot2)
ggplot(data.frame(meanTime = lab10dataset),aes(x=meanTime)) +
geom_histogram(binwidth=0.25,aes(y=..density..)) +
geom_density(color="red")
meanTime <- lab10dataset
ggplot(data.frame(meanTime = lab10dataset),aes(x=meanTime)) +
geom_histogram(binwidth=0.25,aes(y=..density..)) +
geom_density(color="red")
geom_density(color="red")
ggplot(data.frame(meanTime <- lab10dataset),aes(x=meanTime)) +
geom_histogram(binwidth=0.25,aes(y=..density..)) +
geom_density(color="red")
ggplot(data.frame(meanTime <- lab10dataset),aes(x=meanTime)) +
geom_histogram(binwidth=0.25,aes(y=..density..)) +
geom_density(color="red")
ggplot(data.frame(meanTime <- lab10dataset),aes(x=meanTime)) +
geom_histogram(binwidth=1,aes(y=..density..)) +
geom_density(color="red")
ggplot(data.frame(meanTime <- lab10dataset),aes(x=meanTime)) +
geom_histogram(binwidth=200,aes(y=..density..)) +
geom_density(color="red")
ggplot(data.frame(meanTime <- lab10dataset),aes(x=meanTime)) +
geom_histogram(binwidth=200,aes(y=..density..)) +
geom_density(color="red")
hist(lab10dataset)
plot(density(x.norm),main="Density estimate of data")
hist(lab10dataset,main="Histogram of observed data")
hist(lab10dataset$V1,main="Histogram of observed data")
hist(lab10dataset$V1,main="Histogram of observed data")
plot(density(lab10dataset$V1),main="Density estimate of data")
plot(density(lab10dataset$X1),main="Density estimate of data")
hist(lab10dataset$V1)
hist(lab10dataset$V1)
window()
window(x)
window(1)
windows()
hist(lab10dataset$V1)
plot(density(lab10dataset$V1),main="Density")
#Advanced Statistics LAB 10 2018
#ALperen KARA
#LAB 10 Bootstrapping
#1
#rm(list = ls())
setwd("~/GitHub/smada/ADS/LAB10")
plot(density(lab10dataset$V1),main="Density",color="red")
hist(lab10dataset$V1)
plot(density(lab10dataset$V1),main="Density")
plot(ecdf(lab10dataset$V1),main="ECDF")
boot.mean = function(x,B,binwidth=NULL) {
n = length(x)
boot.samples = matrix( sample(x,size=n*B,replace=TRUE), B, n)
boot.statistics = apply(boot.samples,1,mean)
se = sd(boot.statistics)
require(ggplot2)
if ( is.null(binwidth) )
binwidth = diff(range(boot.statistics))/30
p = ggplot(data.frame(x=boot.statistics),aes(x=x)) +
geom_histogram(aes(y=..density..),binwidth=binwidth) + geom_density(color="red")
plot(p)
interval = mean(x) + c(-1,1)*2*se
print( interval )
return( list(boot.statistics = boot.statistics, interval=interval, se=se, plot=p) )
}
lab10variable = read.csv("lab10dataset.csv")
View(lab10variable)
output = with(lab10variable,boot.mean(Height, B= 10000))
output = with(lab10variable,boot.mean(lab10variable$V1, B= 10000))
meanData <- mean(lab10variable$V1)
t.test(meanData, conf.level = 0.95)$conf.int
t.test(meanData, conf.level = 0.95)
t.test(meanData, sigma.x = 6.8,conf.level = 0.95)
z.test(sam.scores, sigma.x = 6.8, conf.level = 0.99)$conf.int
t.test(meanData, sigma.x = 6.8,conf.level = 0.95)$conf.int
meanData
quantile(lab10variable$V1, c(.025, .975))
mean(lab10variable$V1) - 2 * (sd(lab10variable$V1))
mean(lab10variable$V1) + 2 * (sd(lab10variable$V1))
median.boot<-function(lab10variable,indices)
{
return(median(lab10variable[indices]))
}
boot.median<-boot(lab10variable,median.boot,R=10000)
library(boot)
boot.median<-boot(lab10variable,median.boot,R=10000)
boot.median<-boot(lab10variable,median.boot,R=10000)
View(lab10dataset)
View(lab10dataset)
median.boot<-function(lab10dataset,indices)
{
return(median(lab10dataset[indices]))
}
boot.median<-boot(lab10dataset$V1,median.boot,R=10000)
boot.median<-boot(lab10dataset$V1,median.boot,R=10000)
boot.median<-boot(lab10dataset$V1,median.boot,R=10000)
View(boot.mean)
View(boot.median)
View(boot.median)
View(boot.median)
boot.median<-boot(lab10dataset$V1,median.boot,R=10000)
boot.median<-boot(lab10dataset$V1,lab.boot,R=10000)
lab.boot<-function(lab10dataset,indices)
{
return(median(lab10dataset[indices]))
}
lab.median<-boot(lab10dataset$V1,lab.boot,R=10000)
str(lab.median)
hist(lab.median$t)
abline(v=median(lab10dataset$V1))
abline(v=quantile(mean.sample,c(0.025,0.975)),col="green")
abline(v=quantile(output,c(0.025,0.975)),col="green")
library(e1071)
var.boot<-function(lab10dataset,indices)
{
return(var(lab10dataset[indices]))
}
