}
}
}
else{
if (i> m){
m <- i
}
}
}
return(m)
}
mini("test", 1:9, "test")
min <- function (...){
numberList <- list(...)
out <- list()
for(i in numberList){
#convert the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else{
#add elements
out <- append(out, as.numeric(i))
}
}
#find an argument with the min. value using a for loop
for(i in out){
m <- out[1]
if(length(i)>1){
for(el in i){
if(el < m){
m <- el
}
}
}
else{
if (i< m){
m <- i
}
}
}
return(m)
}
min("test", 1:9, "test")
even <- function (...){
numberList <- list(...)
list <- list()
print(numberList)
for(i in numberList){
#14.2 convert the arguments to numbers
if(is.na(as.numeric(i))){
#14.3 skip
next
}
else{
##add
list <- append(list, as.numeric(i))
}
}
#main loop
for(i in list){
if((i %% 2) == 0){
print(i)
print("It is even")
}
else{
print(i)
print("It is not even")
}
}
}
even(2, 4, 6, 8, "test", 10)
odd <- function (...){
#takes any number of arguments
numberList <- list(...)
out <- list()
print(numberList)
for(i in numberList){
#convert and skip
if(is.na(as.numeric(i))){
next
}
else{
#add
out <- append(out, as.numeric(i))
}
}
for(i in out){
if((i %% 2) != 0){
print(i)
print("It is an odd number")
}
else{
print(i)
print("It is an even number")
}
}
}
odd(1, 3, 5, 7, "test", 9)
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
# Program to display the Fibonacci sequence up to n-th term using recursive functions
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(recurse_fibonacci(i))
}
}
recurse_fibonacci(3)
recurse_fibonacci(4)
recurse_fibonacci(10)
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms < 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms : TRUE) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
fibo(10)
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fib <- function(x) {
numeric(x)
fib[1] <- 1
fib[2] <- 1
for (i in 3:x) {
fib[i] <- fib[i-1]+fib[i-2]
}
}
fib(10)
fib <- function(x) {
fib<- numeric(x)
fib[1] <- 1
fib[2] <- 1
for (i in 3:x) {
fib[i] <- fib[i-1]+fib[i-2]
}
}
fib(10)
print(fib10)
print(fib(10)
print(fib(10))
fibo=function(n){
fibo=vector()
fibo[1]=1
fibo[2]=1
for(i in 3:n){fibo[i]=fibo[i-1]+fibo[i-2]}
return(fibo)
}
fibo(10)
fibo=function(n){
fibo=vector()
fibo[1]=1
fibo[2]=1
for(i in 3:n){fibo[i]=fibo[i-1]+fibo[i-2]}
print(fibo)
}
fibo(5)
max <- function (...){
numberList <- list(...)
out <- list()
for(i in numberList){
#convert the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else{
#add elements
out <- append(out, as.numeric(i))
}
}
#find an argument with the max. value using a for loop
for(i in out){
m <- out[1]
if(length(i)>1){
for(len in i){
if(len > m){
m <- len
}
}
}
else{
if (i> m){
m <- i
}
}
}
return(m)
}
max("test", 1:9, "test")
Fibonacci <- function(n) {
x <- c(0,1)
while (length(x) < n) {
position <- length(x)
new <- x[position] + x[position-1]
x <- c(x,new)
}
return(x)
}
Fibonacci(10)
fibo <- function(n) {
x <- c(0,1)
while (length(x) < n) {
position <- length(x)
newValue <- x[position] + x[position-1]
x <- c(x,newValue)
}
return(x)
}
fibo(10)
install.packages("psych")
install.packages("psych")
require("psych")
decribe("cars")
describe("cars")
describe(cars)
prop.test(98,162)
prop.test(98,162, alt = "greater", conf.level = .90)
[1:5,]
?quakes
quakes[1:5, ]
mag<-  quakes$mag
mag[1:5]
t.test(mag)
summary(cars$speed)
?HairEyeColor
str(HairEyeColor)
HairEyeColor
eyes <- margin.table(HairEyeColor,2)
eyes
round(prop.table(eyes),2)
chi1 <- chisq.test(eyes)
chi1 #results
chi2 <- chisq.test(eyes, p=c(.41,.32,.15,.12))
chi2
require("datasets")
?mtcars
str(mtcars)
data(mtcars)
summary(mtcars$qsec)
summary(mtcars$mpg)
summary(mtcars$hp)
d <- describe(mtcars[c(1, 4, 7)])
d
k <- describe(mtcars[c(1, 4, 7)])  # mpg, hp, qsec
k[, c(3, 4, 11, 12)]
kurtosi(mtcars$qsec)
setwd("~/GitHub/smada/ADS/LAB12")
rm(list = ls())
?swiss
data("swiss")
cor(swiss)
round(cor(swiss), 2)
cor.test(swiss$Fertility, swiss$Education)
install.packages(‘‘Hmisc’’)
install.packages("Hmisc")
require("Hmisc")
rcorr(as.matrix(swiss))
?trees
data(trees)
trees[1:5, ]
hist(trees$Height)
hist(trees$Girth)
plot(trees$Girth, trees$Height)
abline(lm(trees$Height ~ trees$Girth))
reg1 <- lm(Height ~ Girth, data = trees)
reg1
summary(reg1)
confint(reg1)
predict(reg1)
predict(reg1, interval = "prediction")
install.packages("mlbench")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.4")
install.packages("dplyr")
library("mlbench", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
?BostonHousing
# nox	 nitric oxides concentration (parts per 10 million)
# rm	 average number of rooms per dwelling
# age	 proportion of owner-occupied units built prior to 1940
# dis	 weighted distances to five Boston employment centres
# rad	 index of accessibility to radial highways
# tax	 full-value property-tax rate per USD 10,000
# ptratio	 pupil-teacher ratio by town
# b	1000(B - 0.63)^2 where B is the proportion of blacks by town
# lstat	 percentage of lower status of the population
# medv	 median value of owner-occupied homes in USD 1000's
data("BostonHousing")
mainData <- BostonHousing
mainData %>%
mainData %>%
ggplot(aes(x=medv))
mainData %>%
ggplot(aes(x = medv)) +
stat_density() +
labs(x = "Median Value ($1000s)", y = "Density", title = "Density Plot of Median Value House Price in Boston") +
theme_minimal()
mainData %>%
ggplot(aes(x = medv)) +
stat_density() +
labs(x = "Median Value", y = "Density", title = "Density Plot of Median Value")
mainData %>%
ggplot(aes(x = medv)) +
stat_density()
mainData %>%
ggplot(aes(x = medv))
stat_density()
mainData %>%
ggplot(aes(x = medv))
mainData %>%
ggplot(aes(x = medv))
stat_density()
mainData %>%
ggplot(aes(x = medv))+stat_density()
mainData(ggplot(aes(x = medv))+stat_density())
housing %>%
select(c(crim, rm, age, rad, tax, lstat, medv)) %>%
melt(, id.vars = "medv") %>%
ggplot(aes(x = value, y = medv, colour = variable)) +
geom_point(alpha = 0.7) +
stat_smooth(aes(colour = "black")) +
facet_wrap(~variable, scales = "free", ncol = 2) +
labs(x = "Variable Value", y = "Median House Price ($1000s)") +
theme_minimal()
mainData %>%
select(c(crim, rm, age, rad, tax, lstat, medv)) %>%
melt(, id.vars = "medv") %>%
ggplot(aes(x = value, y = medv, colour = variable)) +
geom_point(alpha = 0.7) +
stat_smooth(aes(colour = "black")) +
facet_wrap(~variable, scales = "free", ncol = 2) +
labs(x = "Variable Value", y = "Median House Price ($1000s)") +
theme_minimal()
mainData %>%
select(c(crim, rm, age, rad, tax, lstat, medv)) %>%
ggplot(aes(x = value, y = medv, colour = variable)) +
geom_point(alpha = 0.7) +
stat_smooth(aes(colour = "black")) +
facet_wrap(~variable, scales = "free", ncol = 2) +
labs(x = "Variable Value", y = "Median House Price ($1000s)") +
theme_minimal()
mainData %>%
select(c(crim, rm, age, rad, tax, lstat, medv)) %>%
ggplot(aes(x = value, y = medv, colour = variable)) +
geom_point(alpha = 0.7) +
stat_smooth(aes(colour = "black")) +
facet_wrap(~variable, scales = "free", ncol = 2) +
labs(x = "Variable Value", y = "Median House Price ($1000s)") +
theme_minimal()
round(cor(Boston),2)
round(cor(mainData),2)
round(cor(mainData))
cor(mainData)
, fill="turquoise4"))) +
theme(panel.background = element_rect(fill = "gray98"),
axis.line.y = element_line(colour="black"),
axis.line.x = element_line(colour="black"))
pairs3
, fill="turquoise4"))) +
theme(panel.background = element_rect(fill = "gray98"),
axis.line.y = element_line(colour="black"),
axis.line.x = element_line(colour="black"))
mainData %>%
select(c(crim, rm, age, rad, tax, lstat, medv)) %>%
melt(mainData, id.vars = "medv") %>%
ggplot(aes(x = value, y = medv, colour = variable)) +
geom_point(alpha = 0.7) +
stat_smooth(aes(colour = "black")) +
facet_wrap(~variable, scales = "free", ncol = 2) +
labs(x = "Variable Value", y = "Median House Price ($1000s)") +
theme_minimal()
library("reshape2", lib.loc="~/R/win-library/3.4")
mainData %>%
select(c(crim, rm, age, rad, tax, lstat, medv)) %>%
melt(mainData, id.vars = "medv") %>%
ggplot(aes(x = value, y = medv, colour = variable)) +
geom_point(alpha = 0.7) +
stat_smooth(aes(colour = "black")) +
facet_wrap(~variable, scales = "free", ncol = 2) +
labs(x = "Variable Value", y = "Median House Price ($1000s)") +
theme_minimal()
mainData %>%
select(c(crim, rm, age, rad, tax, lstat, medv)) %>%
melt(mainData, id.vars = "medv") %>%
ggplot(aes(x = value, y = medv, colour = variable)) +
geom_point(alpha = 0.7) +
stat_smooth(aes(colour = "black")) +
facet_wrap(~variable, scales = "free", ncol = 2) +
labs(x = "Variable Value", y = "Median House Price ($1000s)") +
theme_minimal()
#4 Set a seed of 123...
library("caret")
install.packages("caret")
library("caret")
set.seed(123)
split_train <- createDataPartition(y = mainData$medv, p = 0.75, list = FALSE)
train <- mainData[split_train, ]
test <- mainData[-split_train, ]
fit_linear_model <- lm(medv ~ crim + rm + tax + lstat, data = train)
lm1_rsqu <- summary(fit_linear_model)$r.squared
print(paste("First linear model has an r-squared value of ", round(lm1_rsqu, 3), sep = ""))
linear_rsquared <- summary(fit_linear_model)$r.squared
print(paste("Linear model has an r-squared value of ", round(linear_rsquared, 3), sep = ""))
plot(fit_linear_model)
round(second_linear_model_rsquared, 3)
############################################
#8 Examine the diagnotics for the model
second_linear_model_rsquared <- summary(second_fit_linear_model)$r.squared
second_fit_linear_model <- lm(log(medv) ~ crim + rm + tax + lstat, data = train)
############################################
#8 Examine the diagnotics for the model
second_linear_model_rsquared <- summary(second_fit_linear_model)$r.squared
round(second_linear_model_rsquared, 3)
predicted <- predict(second_fit_linear_model, newdata = test)
results <- data.frame(predicted = exp(predicted), original = test$medv)
predicted
results %>%
ggplot(aes(x = predicted, y = original)) +
geom_point() +
stat_smooth() +
labs(x = "Predicted Values", y = "Original Values", title = "Predicted vs. Original Values") +
theme_minimal()
