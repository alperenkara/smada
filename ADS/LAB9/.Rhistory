}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
# Program to display the Fibonacci sequence up to n-th term using recursive functions
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(recurse_fibonacci(i))
}
}
recurse_fibonacci(3)
recurse_fibonacci(4)
recurse_fibonacci(10)
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms < 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms : TRUE) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
fibo <- function(n) {
if(n <= 1) {
return(n)
} else {
return(fibo(n-1) + fibo(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(fibo(i))
}
fibo(10)
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fib <- function(x) {
numeric(x)
fib[1] <- 1
fib[2] <- 1
for (i in 3:x) {
fib[i] <- fib[i-1]+fib[i-2]
}
}
fib(10)
fib <- function(x) {
fib<- numeric(x)
fib[1] <- 1
fib[2] <- 1
for (i in 3:x) {
fib[i] <- fib[i-1]+fib[i-2]
}
}
fib(10)
print(fib10)
print(fib(10)
print(fib(10))
fibo=function(n){
fibo=vector()
fibo[1]=1
fibo[2]=1
for(i in 3:n){fibo[i]=fibo[i-1]+fibo[i-2]}
return(fibo)
}
fibo(10)
fibo=function(n){
fibo=vector()
fibo[1]=1
fibo[2]=1
for(i in 3:n){fibo[i]=fibo[i-1]+fibo[i-2]}
print(fibo)
}
fibo(5)
max <- function (...){
numberList <- list(...)
out <- list()
for(i in numberList){
#convert the arguments to numbers
if(is.na(as.numeric(i))){
next
}
else{
#add elements
out <- append(out, as.numeric(i))
}
}
#find an argument with the max. value using a for loop
for(i in out){
m <- out[1]
if(length(i)>1){
for(len in i){
if(len > m){
m <- len
}
}
}
else{
if (i> m){
m <- i
}
}
}
return(m)
}
max("test", 1:9, "test")
Fibonacci <- function(n) {
x <- c(0,1)
while (length(x) < n) {
position <- length(x)
new <- x[position] + x[position-1]
x <- c(x,new)
}
return(x)
}
Fibonacci(10)
fibo <- function(n) {
x <- c(0,1)
while (length(x) < n) {
position <- length(x)
newValue <- x[position] + x[position-1]
x <- c(x,newValue)
}
return(x)
}
fibo(10)
install.packages("psych")
install.packages("psych")
require("psych")
decribe("cars")
describe("cars")
describe(cars)
prop.test(98,162)
prop.test(98,162, alt = "greater", conf.level = .90)
[1:5,]
?quakes
quakes[1:5, ]
mag<-  quakes$mag
mag[1:5]
t.test(mag)
summary(cars$speed)
?HairEyeColor
str(HairEyeColor)
HairEyeColor
eyes <- margin.table(HairEyeColor,2)
eyes
round(prop.table(eyes),2)
chi1 <- chisq.test(eyes)
chi1 #results
chi2 <- chisq.test(eyes, p=c(.41,.32,.15,.12))
chi2
require("datasets")
?mtcars
str(mtcars)
data(mtcars)
summary(mtcars$qsec)
summary(mtcars$mpg)
summary(mtcars$hp)
d <- describe(mtcars[c(1, 4, 7)])
d
k <- describe(mtcars[c(1, 4, 7)])  # mpg, hp, qsec
k[, c(3, 4, 11, 12)]
kurtosi(mtcars$qsec)
setwd("~/GitHub/smada/ADS/LAB9")
data(state.area)
?state.area
data(state.area)
data(state.area)
data(state.area)
state.area
rm(list = ls())
?state.area
data(state.area)
load(state.area)
state.area
area <-state.area
hist(area)
summary(area)
mean(area, trim = .50)
mean(area, trim = .05)
mean(area, trim = .10)
mean(area, trim = .20)
mean(area, trim = .50)
mean(area)
median(area)
mean(area, trim = .05)
mean(area, trim = .10)
mean(area, trim = .20)
mean(area, trim = .50)
mean(area, trim = .20)
mean(area, trim = .10)
mean(area, trim = .05)
sd(area)
mad(area) # Median absolute deviation
mad(area)
IQR(area)
download.file("http://home.agh.edu.pl/~mmd/_media/dydaktyka/as-is/os.csv.zip", "os.csv.zip")
unzip("os.csv.zip")
OS <- read.csv("./os.csv", header = TRUE)
OS <- read.csv("./os.csv", header = TRUE)
View(OS)
#3.2
OS.hi <- subset(OS, Proportion > 0.1)
#3.3 In quantitative data the easiest way to see outliers is using boxplots..
require("datasets")
?rivers
data(rivers)
hist(rivers)
#3.4 Create the boxplot for rivers
boxplot(rivers, horizontal = TRUE)
#3.5 Get the statistics from boxplot.stats ...
boxplot.stats(rivers)
#3.5 Get the statistics from boxplot.stats ...
boxplot.stats(rivers)
#3.5 Remove the outliers...
rivers.low <- rivers[rivers < 1210]
boxplot(rivers.low, horizontal = TRUE)
#3.7
rivers.low2 <- rivers[rivers < 1055]
boxplot(rivers.low2)
boxplot(rivers.low2)
## Transforming Variables
#TV1
?islands
islands
hist(islands, breaks = 16)
boxplot(rivers.low2)
## Transforming Variables
#TV1
?islands
islands
hist(islands, breaks = 16)
boxplot(rivers.low2)
## Transforming Variables
#TV1
?islands
islands
hist(islands, breaks = 16)
#TV2 display the boxplot
boxplot(islands)
data(rivers)
#TV3 transform the scores into z-scores
island.z <- scale(islands)
island.z
sd(islands.z)
#TV4 Check if mean value is equal to 0
mean(islands.z)
#TV3 transform the scores into z-scores
islands.z <- scale(islands)
#TV4 Check if mean value is equal to 0
mean(islands.z)
round(mean(islands.z), 2)
sd(islands.z)
#TV5 After scaling the data..
attr(islands.z, "scaled:center")
attr(islands.z, "scaled:scale")
attr(islands.z, "scaled:scale") # 3371.146
#TV6 Convert the matrix
islands.z <- as.numeric(islands.z)
islands.z
#TV7 Transform data with logarithmic transformations
islands.ln <- log(islands)
hist(islands.ln)
boxplot(islands.ln)
#TV8 Transform the original data by using ranking
islands.rank <- rank(islands)
hist(islands.rank)
boxplot(islands.rank)
#TV9 Dichotomize data by using the ifelse conditional..
continent <- ifelse(islands > 1000, 1, 0)
continent
#COmparing means with the 2 sample t-test
#1 Look at the sleep data set and then display the first 5 lines of the dataset
?sleep
sleep[1:5, ]
#2 Save just the first two variables
sd <- sleep[, 1:2]
#3
hist(sd$extra, col = "lightgray")
boxplot(extra ~ group, data = sd)
#4
t.test(extra ~ group, data = sd)
#5
t.test(extra ~ group,
data = sd,
alternative = "less",
conf.level = 0.80)
y <- rnorm(30, mean = 22, sd = 5)
#6 create two groups..
x <- rnorm(30, mean = 20, sd = 5)
t.test(x, y)
x <- rnorm(30, mean = 20, sd = 5)
y <- rnorm(30, mean = 22, sd = 5)
t.test(x, y)
#Comparing paired means with paired t-test
t1 <- rnorm(50, mean = 52, sd = 6)
#2
dif <- rnorm(50, mean = 6, sd = 12)
t2 <- t1 + dif
#3 make and analyze histograms...
hist(t1)
hist(dif)
hist(t2)
boxplot(t1, t2)
require("MASS")
#Create parallel coordinate
pairs <- data.frame(t1, t2)
require("MASS")
parcoord(pairs, var.label = TRUE)
#Comparing paired means with paired t-test
#1
t1 <- rnorm(50, mean = 52, sd = 6)
#5 do the paired
t.test(t2, t1, paired = TRUE)
#mean of the differences 8.809322
#6 Change the settings of the paired t-test
t.test(t2, t1,
paired = TRUE,
mu = 6,
alternative = "greater",
conf.level = 0.99)
#mean of the differences 8.809322
#6 Change the settings of the paired t-test
t.test(t2, t1, paired = TRUE, mu = 6, alternative = "greater",conf.level = 0.99)
#ADS 2018,
#lab 9 Statistical Inference Part 3
#Alperen KARA
#1 Download and extract
download.file("http://home.agh.edu.pl/~mmd/_media/dydaktyka/as-is/mlb2011.zip", "mlb2011.zip")
unzip("mlb2011.zip")
TEAM <- read.csv("./mlb2011", header = TRUE)
TEAM <- read.csv("./mlb2011.csv", header = TRUE)
TEAM
hist(TEAM)
team
TEAM
boxplot(twam, horizontal = TRUE)
boxplot(TEAM, horizontal = TRUE)
hist
hist(TEAM)
hist.default(TEAM)
boxplot(TEAM, vertical = TRUE)
boxplot(TEAM, vertical = TRUE, horizontal = TRUE)
TEAM.low <- TEAM[TEAM[:5] < 50]
TEAM.low <- TEAM[TEAM[:,5] < 50]
TEAM.low <- TEAM[TEAM[,5] < 50]
TEAM.low
TEAM.low <- TEAM[TEAM[:,5] < 50]
TEAM.low
View(TEAM.low)
View(TEAM.low)
TEAM.low <- TEAM[TEAM[:,5] > 50]
TEAM.low <- TEAM[TEAM[,5] > 50]
TEAM.low <- TEAM[TEAM[,4] > 50]
TEAM.low <- TEAM[TEAM[,5] > 50]
TEAM.low <- TEAM[TEAM[,5] > 50]
TEAM.low <- TEAM[TEAM[,5] < 50]
TEAM.low <- TEAM[TEAM[,5] > %50]
TEAM.low <- TEAM[TEAM[,5] > 50%]
TEAM.low <- TEAM[TEAM[0,5] > 50]
TEAM.low
TEAM.low <- TEAM[TEAM[1,5] > 50]
View(TEAM.low)
View(TEAM.low)
TEAM.low <- TEAM[TEAM[30,'HomeAdv'] > 50]
View(TEAM.low)
View(TEAM.low)
TEAM.low <- TEAM[TEAM[30,"HomeAdv"] > 50]
TEAM.low <- TEAM[TEAM[30,5] > 50]
TEAM.low <- [TEAM[30,5] > 50]
TEAM.low <- TEAM[30,5] > 50
TEAM.low <- TEAM[TEAM[30,5] > 50]
TEAM.low <- TEAM[TEAM[30:5] > 50]
TEAM.low <- TEAM[TEAM[:5] > 50]
TEAM.low <- TEAM[TEAM[,5] > 50]
TEAM.low <- TEAM[c(TEAM[,5] > 50)]
newdata <- TEAM[c(1,5:10)]
newdata <- TEAM[c(1,5:5)]
View(newdata)
View(newdata)
newdata <- TEAM[c(3,5:5)]
newdata <- TEAM[c(4,5:5)]
newdata <- TEAM[c(4,6:5)]
newdata <- TEAM[c(4,6:1)]
newdata <- TEAM[c(4,6:5)]
newdata <- TEAM[c(4,6:6)]
newdata <- TEAM[c(4,6:7)]
newdata <- TEAM[c(4,6:5)]
newdata <- TEAM[c(4,6:6)]
newdata <- TEAM[c(5,6:6)]
newdata <- TEAM[c(6,6:6)]
newdata <- TEAM[c(6,:6)]
newdata <- TEAM[c(6,0:6)]
newdata <- TEAM[c(6,6:6)]
newdata <- TEAM[c(6,6:)]
newdata <- TEAM[c(6,6:0)]
newdata <- TEAM[c(6,6:7)]
newdata <- TEAM[c(6,6:6)]
newdata <- TEAM[c(6)]
newdata <- TEAM[c(6)>50]
newdata <- TEAM[c(6)>%50]
newdata <- TEAM[c(6)>50%]
minind<- which(TEAM ==min(TEAM))
# 2 - statistics on a dataset
#field advantage value
TEAM<- data$HomeWins/data$AllWins
newdata <- TEAM[c(6)>50]
# 2 - statistics on a dataset
#field advantage value
TEAM<- data$HomeWins/data$AllWins
# 2 - statistics on a dataset
#field advantage value
TEAM<- TEAM$HomeWins/TEAM$AllWins
boxplot(TEAMC)
# 2 - statistics on a dataset
#field advantage value
TEAMC<- TEAM$HomeWins/TEAM$AllWins
TEAM <- read.csv("./mlb2011.csv", header = TRUE)
boxplot(TEAM, vertical = TRUE)
# 2 - statistics on a dataset
#field advantage value
TEAMC<- TEAM$HomeWins/TEAM$AllWins
boxplot(TEAMC)
#on the plot we can observe two outliers
#boxplot stats
boxplot.stats(TEAMC)
#on the plot we can observe two outliers
#boxplot stats
#$stats
#[1] 0.4556962 0.5098039 0.5272028 0.5500000 0.5937500
boxplot.stats(TEAMC)
#mean value
mean(TEAMC)
#median value
median(TEAMC)
# 3
#minimum value - the lowest percentage is 43%
min(TEAMC)
minind<- which(TEAM ==min(TEAM))
maxind<- which(TEAMC ==max(TEAMC))
maxind<- which(TEAMC ==max(TEAMC))
data$Team[maxind]
TEAM$Team[maxind]
TEAM$Team[minind]
